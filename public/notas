<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Exercitationem praesentium ab dolores dignissimos
        quaerat, ipsum reprehenderit consequatur aut. Dignissimos repudiandae saepe et placeat reiciendis obcaecati
        ipsum fugit aliquam consequuntur ex!
      </p>


Agregar esto despues en Raking
function getUsernameCooldown(loggedUserRole) {
  if (loggedUserRole === 'owner') return null; // Owners no tienen cooldown

  const cooldownData = localStorage.getItem('usernameCooldown');
  if (!cooldownData) return null;

  const parsed = JSON.parse(cooldownData);
  const createdAt = new Date(parsed.createdAt);
  const expires = new Date(createdAt.getTime() + 10 * 1000); // 10 segundos

  if (new Date() > expires) {
    localStorage.removeItem('usernameCooldown');
    return null;
  }

  return { ...parsed, expires }; // ahora tiene expires
}


 const newUsername = usernameInput.value.trim();
    if (newUsername && newUsername !== loggedUser) {
        const cooldown = getUsernameCooldown(userData.role);
        if (cooldown) {
            alert(`Aún no puedes cambiar tu nombre. Intenta más tarde.`);
            return;
        }

        try {
            const resName = await fetch(`http://localhost:3000/api/profile/${loggedUser}/change-username`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ newUsername })
            });
            const dataName = await resName.json();
            if (!resName.ok || !dataName.success) throw new Error(dataName.message || 'Error al cambiar nombre');

            // Actualizar UI
            loggedUser = newUsername;
            usernameDisplay.textContent = newUsername;
            profileName.textContent = newUsername;
            localStorage.setItem('loggedUser', newUsername);

            // Guardar cooldown
            const createdAt = new Date();
            localStorage.setItem('usernameCooldown', JSON.stringify({ createdAt }));

            cooldownMsg.textContent = `Puedes cambiar tu nombre nuevamente en 10 segundos`;
            usernameInput.disabled = true;

        } catch (err) {
            alert('No se pudo cambiar el nombre: ' + err.message);
            console.error(err);
            return;
        }
    }


      // ---- ACTUALIZAR PERFIL ----
      try {
        const res = await fetch(`http://localhost:3000/api/profile/${loggedUser}`, {
          method: 'POST',
          body: formData,
        });
        const data = await res.json();

        if (!res.ok || !data.success) throw new Error(data.message || 'Error al guardar perfil');

        setTimeout(() => {
          if (fileInput.files[0]) {
            const reader = new FileReader();
            reader.onload = (event) => {
              const newAvatarUrl = event.target.result;
              avatarDiv.innerHTML = `<img src="${newAvatarUrl}" alt="Avatar Usuario" />`;
              navAvatarDiv.innerHTML = `<img src="${newAvatarUrl}" alt="Avatar de ${loggedUser}" />`;
            };
            reader.readAsDataURL(fileInput.files[0]);
          }

          descDiv.textContent = description || 'Bienvenido a tu perfil';
          popupOverlay.classList.add('hidden');
          fileInput.value = '';

          showPopupSuccess('Perfil actualizado correctamente');
        }, 300);

      } catch (err) {
        alert('No se pudo guardar el perfil: ' + err.message);
        console.error(err);
      }
    });
